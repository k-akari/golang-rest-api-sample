// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go
//
// Generated by this command:
//
//	mockgen -source=usecase.go -destination=mock/usecase.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/k-akari/payment.com/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockcompanyUsecase is a mock of companyUsecase interface.
type MockcompanyUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockcompanyUsecaseMockRecorder
}

// MockcompanyUsecaseMockRecorder is the mock recorder for MockcompanyUsecase.
type MockcompanyUsecaseMockRecorder struct {
	mock *MockcompanyUsecase
}

// NewMockcompanyUsecase creates a new mock instance.
func NewMockcompanyUsecase(ctrl *gomock.Controller) *MockcompanyUsecase {
	mock := &MockcompanyUsecase{ctrl: ctrl}
	mock.recorder = &MockcompanyUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcompanyUsecase) EXPECT() *MockcompanyUsecaseMockRecorder {
	return m.recorder
}

// CreateCompany mocks base method.
func (m *MockcompanyUsecase) CreateCompany(ctx context.Context, company *domain.Company) (domain.CompanyID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", ctx, company)
	ret0, _ := ret[0].(domain.CompanyID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockcompanyUsecaseMockRecorder) CreateCompany(ctx, company any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockcompanyUsecase)(nil).CreateCompany), ctx, company)
}

// GetCompanyByID mocks base method.
func (m *MockcompanyUsecase) GetCompanyByID(ctx context.Context, companyID domain.CompanyID) (*domain.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyByID", ctx, companyID)
	ret0, _ := ret[0].(*domain.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyByID indicates an expected call of GetCompanyByID.
func (mr *MockcompanyUsecaseMockRecorder) GetCompanyByID(ctx, companyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyByID", reflect.TypeOf((*MockcompanyUsecase)(nil).GetCompanyByID), ctx, companyID)
}
